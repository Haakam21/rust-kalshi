/*
 * Kalshi Trade API
 *
 * This documentation describes Kalshi's trading API (known as Trade API v2). By using this API, you agree to Kalshi's Developer Agreement (https://kalshi.com/developer-agreement).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@kalshi.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Fill : Represents a trade from the trader's perspective.  A trade is created whenever an order is fully or partially matched, so there can be multiple trades with the same order ID. It is guaranteed that the sum of the **count** field for all the trades with the same order ID shouldn't exceed the **place_count** on the order.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Fill {
    /// Specifies if this is a buy or sell order. buy OrderActionBuy sell OrderActionSell  OrderActionUnknown
    #[serde(rename = "action")]
    pub action: Action,
    /// Number of contracts to be bought or sold.
    #[serde(rename = "count")]
    pub count: i32,
    /// Date and time in the ISO 8601 spec. Example: 2022-11-30T15:00:00Z
    #[serde(rename = "created_time")]
    pub created_time: String,
    /// If true then this fill was a taker.
    #[serde(rename = "is_taker")]
    pub is_taker: bool,
    /// Fill price for the no side in cents.
    #[serde(rename = "no_price")]
    pub no_price: i64,
    /// Unique identifier for orders.
    #[serde(rename = "order_id")]
    pub order_id: uuid::Uuid,
    /// Specifies if this is a 'yes' or 'no' fill. yes SIDE_YES no SIDE_NO  SIDE_UNSET
    #[serde(rename = "side")]
    pub side: Side,
    /// Unique identifier for markets.
    #[serde(rename = "ticker")]
    pub ticker: String,
    /// Unique identifier for fills.
    #[serde(rename = "trade_id")]
    pub trade_id: uuid::Uuid,
    /// Fill price for the yes side in cents.
    #[serde(rename = "yes_price")]
    pub yes_price: i64,
}

impl Fill {
    /// Represents a trade from the trader's perspective.  A trade is created whenever an order is fully or partially matched, so there can be multiple trades with the same order ID. It is guaranteed that the sum of the **count** field for all the trades with the same order ID shouldn't exceed the **place_count** on the order.
    pub fn new(action: Action, count: i32, created_time: String, is_taker: bool, no_price: i64, order_id: uuid::Uuid, side: Side, ticker: String, trade_id: uuid::Uuid, yes_price: i64) -> Fill {
        Fill {
            action,
            count,
            created_time,
            is_taker,
            no_price,
            order_id,
            side,
            ticker,
            trade_id,
            yes_price,
        }
    }
}
/// Specifies if this is a buy or sell order. buy OrderActionBuy sell OrderActionSell  OrderActionUnknown
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
    #[serde(rename = "")]
    Empty,
}

impl Default for Action {
    fn default() -> Action {
        Self::Buy
    }
}
/// Specifies if this is a 'yes' or 'no' fill. yes SIDE_YES no SIDE_NO  SIDE_UNSET
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "yes")]
    Yes,
    #[serde(rename = "no")]
    No,
    #[serde(rename = "")]
    Empty,
}

impl Default for Side {
    fn default() -> Side {
        Self::Yes
    }
}

