/*
 * Kalshi Trade API
 *
 * This documentation describes Kalshi's trading API (known as Trade API v2). By using this API, you agree to Kalshi's Developer Agreement (https://kalshi.com/developer-agreement).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@kalshi.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Series : Represents a group of events that have the same underlying source.  For example: Fed interest rate hikes is a series with multiple events, one for each FOMC meeting.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Series {
    /// Category specifies the category which this series belongs to.
    #[serde(rename = "category")]
    pub category: String,
    /// ContractUrl provides a direct link to contract terms which govern the series.
    #[serde(rename = "contract_url")]
    pub contract_url: String,
    /// Description of the frequency of the series. There is no fixed value set here, but will be something human-readable like: weekly, daily, one-off.
    #[serde(rename = "frequency")]
    pub frequency: String,
    /// SettlementSources specifies the official sources used for the determination of markets within the series. Methodology is defined in the rulebook.
    #[serde(rename = "settlement_sources")]
    pub settlement_sources: Vec<models::SettlementSource>,
    /// Tags specifies the subjects that this series relates to, multiple series from different categories can have the same tags.
    #[serde(rename = "tags")]
    pub tags: Vec<String>,
    /// Ticker that identifies this series.
    #[serde(rename = "ticker")]
    pub ticker: String,
    /// Title describing the series. For full context use you should use this field with the title field of the events belonging to this series.
    #[serde(rename = "title")]
    pub title: String,
}

impl Series {
    /// Represents a group of events that have the same underlying source.  For example: Fed interest rate hikes is a series with multiple events, one for each FOMC meeting.
    pub fn new(category: String, contract_url: String, frequency: String, settlement_sources: Vec<models::SettlementSource>, tags: Vec<String>, ticker: String, title: String) -> Series {
        Series {
            category,
            contract_url,
            frequency,
            settlement_sources,
            tags,
            ticker,
            title,
        }
    }
}

