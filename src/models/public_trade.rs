/*
 * Kalshi Trade API
 *
 * This documentation describes Kalshi's trading API (known as Trade API v2). By using this API, you agree to Kalshi's Developer Agreement (https://kalshi.com/developer-agreement).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@kalshi.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PublicTrade : Represents a trade that can be displayed publicly. This does not include maker and taker information.  A trade is created whenever an order is fully or partially matched.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublicTrade {
    /// Number of contracts to be bought or sold.
    #[serde(rename = "count")]
    pub count: i32,
    /// Date and time in the ISO 8601 spec. Example: 2022-11-30T15:00:00Z
    #[serde(rename = "created_time")]
    pub created_time: String,
    /// No price for this trade in cents.
    #[serde(rename = "no_price")]
    pub no_price: i64,
    /// Side for the taker of this trade. yes SIDE_YES no SIDE_NO  SIDE_UNSET
    #[serde(rename = "taker_side")]
    pub taker_side: TakerSide,
    /// Unique identifier for markets.
    #[serde(rename = "ticker")]
    pub ticker: String,
    /// Unique identifier for this trade.
    #[serde(rename = "trade_id")]
    pub trade_id: uuid::Uuid,
    /// Yes price for this trade in cents.
    #[serde(rename = "yes_price")]
    pub yes_price: i64,
}

impl PublicTrade {
    /// Represents a trade that can be displayed publicly. This does not include maker and taker information.  A trade is created whenever an order is fully or partially matched.
    pub fn new(count: i32, created_time: String, no_price: i64, taker_side: TakerSide, ticker: String, trade_id: uuid::Uuid, yes_price: i64) -> PublicTrade {
        PublicTrade {
            count,
            created_time,
            no_price,
            taker_side,
            ticker,
            trade_id,
            yes_price,
        }
    }
}
/// Side for the taker of this trade. yes SIDE_YES no SIDE_NO  SIDE_UNSET
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TakerSide {
    #[serde(rename = "yes")]
    Yes,
    #[serde(rename = "no")]
    No,
}

impl Default for TakerSide {
    fn default() -> TakerSide {
        Self::Yes
    }
}

