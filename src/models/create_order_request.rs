/*
 * Kalshi Trade API
 *
 * This documentation describes Kalshi's trading API (known as Trade API v2). By using this API, you agree to Kalshi's Developer Agreement (https://kalshi.com/developer-agreement).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@kalshi.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateOrderRequest : Request for submitting an order
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateOrderRequest {
    /// Specifies if this is a buy or sell order.
    #[serde(rename = "action")]
    pub action: String,
    /// If type = market and action = buy, buy_max_cost represents the maximum cents that can be spent to acquire a position.
    #[serde(rename = "buy_max_cost", skip_serializing_if = "Option::is_none")]
    pub buy_max_cost: Option<i64>,
    #[serde(rename = "client_order_id")]
    pub client_order_id: String,
    /// Number of contracts to be bought or sold.
    #[serde(rename = "count")]
    pub count: i32,
    /// Expiration time of the order, in unix seconds.  If this is not supplied, the order won't expire until explicitly cancelled. This is also known as Good 'Till Cancelled (GTC).  If the time is in the past, the order will attempt to partially or completely fill and the remaining unfilled quantity will be cancelled. This is also known as Immediate-or-Cancel (IOC).  If the time is in the future, the remaining unfilled quantity order will expire at the specified time.
    #[serde(rename = "expiration_ts", skip_serializing_if = "Option::is_none")]
    pub expiration_ts: Option<i64>,
    /// Submitting price of the No side of the trade, in cents. Exactly one of yes_price and no_price must be passed. If both prices are passed, return 400.
    #[serde(rename = "no_price", skip_serializing_if = "Option::is_none")]
    pub no_price: Option<i64>,
    /// SellPositionFloor will not let you flip position for a market order if set to 0.
    #[serde(rename = "sell_position_floor", skip_serializing_if = "Option::is_none")]
    pub sell_position_floor: Option<i32>,
    /// Specifies if this is a 'yes' or 'no' order.
    #[serde(rename = "side")]
    pub side: String,
    /// The ticker of the market the order will be placed in.
    #[serde(rename = "ticker")]
    pub ticker: String,
    /// Specifies if this is a \"market\" or a \"limit\" order. Note that either the Yes Price or the No Price must be provided for limit orders.
    #[serde(rename = "type")]
    pub r#type: String,
    /// Submitting price of the Yes side of the trade, in cents. Exactly one of yes_price and no_price must be passed. If both prices are passed, return 400.
    #[serde(rename = "yes_price", skip_serializing_if = "Option::is_none")]
    pub yes_price: Option<i64>,
}

impl CreateOrderRequest {
    /// Request for submitting an order
    pub fn new(action: String, client_order_id: String, count: i32, side: String, ticker: String, r#type: String) -> CreateOrderRequest {
        CreateOrderRequest {
            action,
            buy_max_cost: None,
            client_order_id,
            count,
            expiration_ts: None,
            no_price: None,
            sell_position_floor: None,
            side,
            ticker,
            r#type,
            yes_price: None,
        }
    }
}

