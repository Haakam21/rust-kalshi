/*
 * Kalshi Trade API
 *
 * This documentation describes Kalshi's trading API (known as Trade API v2). By using this API, you agree to Kalshi's Developer Agreement (https://kalshi.com/developer-agreement).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@kalshi.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Announcement {
    /// The time the announcement was delivered.
    #[serde(rename = "delivery_time")]
    pub delivery_time: String,
    /// The message contained within the announcement.
    #[serde(rename = "message")]
    pub message: String,
    /// The current status of this announcement. info AnnouncementTypeInfo warning AnnouncementTypeWarning error AnnouncementTypeError  AnnouncementTypeUnknown
    #[serde(rename = "status")]
    pub status: Status,
    /// The type of the announcement. info AnnouncementTypeInfo warning AnnouncementTypeWarning error AnnouncementTypeError  AnnouncementTypeUnknown
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl Announcement {
    pub fn new(delivery_time: String, message: String, status: Status, r#type: Type) -> Announcement {
        Announcement {
            delivery_time,
            message,
            status,
            r#type,
        }
    }
}
/// The current status of this announcement. info AnnouncementTypeInfo warning AnnouncementTypeWarning error AnnouncementTypeError  AnnouncementTypeUnknown
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "")]
    Empty,
}

impl Default for Status {
    fn default() -> Status {
        Self::Info
    }
}
/// The type of the announcement. info AnnouncementTypeInfo warning AnnouncementTypeWarning error AnnouncementTypeError  AnnouncementTypeUnknown
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "")]
    Empty,
}

impl Default for Type {
    fn default() -> Type {
        Self::Info
    }
}

