/*
 * Kalshi Trade API
 *
 * This documentation describes Kalshi's trading API (known as Trade API v2). By using this API, you agree to Kalshi's Developer Agreement (https://kalshi.com/developer-agreement).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@kalshi.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Order : Represents member orders in the API.  When an order is matched multiple trades can be created this can be tracked by looking into the trade.orderId field.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Order {
    /// Representing trade action; currently supports buy and sell. buy OrderActionBuy sell OrderActionSell  OrderActionUnknown
    #[serde(rename = "action")]
    pub action: Action,
    /// The amendment delta throughout the lifecycle of the order (contract units).
    #[serde(rename = "amend_count", skip_serializing_if = "Option::is_none")]
    pub amend_count: Option<i32>,
    /// The size of filled taker orders (contract units) as a result of an amendment
    #[serde(rename = "amend_taker_fill_count", skip_serializing_if = "Option::is_none")]
    pub amend_taker_fill_count: Option<i32>,
    #[serde(rename = "client_order_id")]
    pub client_order_id: String,
    /// The size of resting orders canceled because of market close (contract units).
    #[serde(rename = "close_cancel_count", skip_serializing_if = "Option::is_none")]
    pub close_cancel_count: Option<i32>,
    /// Date and time in the ISO 8601 spec. Example: 2022-11-30T15:00:00Z
    #[serde(rename = "created_time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    /// The reduction in the size of resting for orders (contract units).
    #[serde(rename = "decrease_count", skip_serializing_if = "Option::is_none")]
    pub decrease_count: Option<i32>,
    /// Date and time in the ISO 8601 spec. Example: 2022-11-30T15:00:00Z
    #[serde(rename = "expiration_time", skip_serializing_if = "Option::is_none")]
    pub expiration_time: Option<String>,
    /// The size of resting contracts canceled because of exchange operations (contract units).
    #[serde(rename = "fcc_cancel_count", skip_serializing_if = "Option::is_none")]
    pub fcc_cancel_count: Option<i32>,
    /// Date and time in the ISO 8601 spec. Example: 2022-11-30T15:00:00Z
    #[serde(rename = "last_update_time", skip_serializing_if = "Option::is_none")]
    pub last_update_time: Option<String>,
    /// Fees paid on filled maker contracts, in cents.
    #[serde(rename = "maker_fees", skip_serializing_if = "Option::is_none")]
    pub maker_fees: Option<i64>,
    /// The cost of filled maker orders in cents.
    #[serde(rename = "maker_fill_cost", skip_serializing_if = "Option::is_none")]
    pub maker_fill_cost: Option<i64>,
    /// The size of filled maker orders (contract units).
    #[serde(rename = "maker_fill_count", skip_serializing_if = "Option::is_none")]
    pub maker_fill_count: Option<i32>,
    /// Submitting price of the No side of the trade, in cents. Exactly one of yes_price and no_price must be passed. If both prices are passed, return 400.
    #[serde(rename = "no_price")]
    pub no_price: i64,
    /// Unique identifier for orders.
    #[serde(rename = "order_id")]
    pub order_id: String,
    /// the size of placed maker orders (contract units).
    #[serde(rename = "place_count", skip_serializing_if = "Option::is_none")]
    pub place_count: Option<i32>,
    /// Position in the priority queue at a given price level
    #[serde(rename = "queue_position", skip_serializing_if = "Option::is_none")]
    pub queue_position: Option<i32>,
    /// The size of the remaining resting orders (contract units).
    #[serde(rename = "remaining_count", skip_serializing_if = "Option::is_none")]
    pub remaining_count: Option<i32>,
    /// Representing direction of the order; currently supports yes and no. yes SIDE_YES no SIDE_NO  SIDE_UNSET
    #[serde(rename = "side")]
    pub side: Side,
    /// The current status of this order. resting OrderStatusResting canceled OrderStatusCanceled executed OrderStatusExecuted pending OrderStatusPending  Will be used for order queue to represent orders that haven't been matched yet.
    #[serde(rename = "status")]
    pub status: Status,
    /// Fees paid on filled taker contracts, in cents.
    #[serde(rename = "taker_fees", skip_serializing_if = "Option::is_none")]
    pub taker_fees: Option<i64>,
    /// The cost of filled taker orders in cents.
    #[serde(rename = "taker_fill_cost", skip_serializing_if = "Option::is_none")]
    pub taker_fill_cost: Option<i64>,
    /// The size of filled taker orders (contract units)
    #[serde(rename = "taker_fill_count", skip_serializing_if = "Option::is_none")]
    pub taker_fill_count: Option<i32>,
    /// The reduction in the size of a taker order due to self-trade prevention cancellation (contract units). Will be zero for orders placed before the introduction of this field.
    #[serde(rename = "taker_self_trade_cancel_count", skip_serializing_if = "Option::is_none")]
    pub taker_self_trade_cancel_count: Option<i32>,
    /// Unique identifier for markets.
    #[serde(rename = "ticker")]
    pub ticker: String,
    /// Representing order type; currently supports \"market\" and \"limit\".  OrderTypeUnknown market OrderTypeMarket limit OrderTypeLimit
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// The yes price for this order in cents.
    #[serde(rename = "yes_price")]
    pub yes_price: i64,
}

impl Order {
    /// Represents member orders in the API.  When an order is matched multiple trades can be created this can be tracked by looking into the trade.orderId field.
    pub fn new(action: Action, client_order_id: String, no_price: i64, order_id: String, side: Side, status: Status, ticker: String, r#type: Type, yes_price: i64) -> Order {
        Order {
            action,
            amend_count: None,
            amend_taker_fill_count: None,
            client_order_id,
            close_cancel_count: None,
            created_time: None,
            decrease_count: None,
            expiration_time: None,
            fcc_cancel_count: None,
            last_update_time: None,
            maker_fees: None,
            maker_fill_cost: None,
            maker_fill_count: None,
            no_price,
            order_id,
            place_count: None,
            queue_position: None,
            remaining_count: None,
            side,
            status,
            taker_fees: None,
            taker_fill_cost: None,
            taker_fill_count: None,
            taker_self_trade_cancel_count: None,
            ticker,
            r#type,
            user_id: None,
            yes_price,
        }
    }
}
/// Representing trade action; currently supports buy and sell. buy OrderActionBuy sell OrderActionSell  OrderActionUnknown
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
    #[serde(rename = "")]
    Empty,
}

impl Default for Action {
    fn default() -> Action {
        Self::Buy
    }
}
/// Representing direction of the order; currently supports yes and no. yes SIDE_YES no SIDE_NO  SIDE_UNSET
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "yes")]
    Yes,
    #[serde(rename = "no")]
    No,
    #[serde(rename = "")]
    Empty,
}

impl Default for Side {
    fn default() -> Side {
        Self::Yes
    }
}
/// The current status of this order. resting OrderStatusResting canceled OrderStatusCanceled executed OrderStatusExecuted pending OrderStatusPending  Will be used for order queue to represent orders that haven't been matched yet.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "resting")]
    Resting,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "executed")]
    Executed,
    #[serde(rename = "pending")]
    Pending,
}

impl Default for Status {
    fn default() -> Status {
        Self::Resting
    }
}
/// Representing order type; currently supports \"market\" and \"limit\".  OrderTypeUnknown market OrderTypeMarket limit OrderTypeLimit
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "")]
    Empty,
    #[serde(rename = "market")]
    Market,
    #[serde(rename = "limit")]
    Limit,
}

impl Default for Type {
    fn default() -> Type {
        Self::Empty
    }
}

