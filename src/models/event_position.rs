/*
 * Kalshi Trade API
 *
 * This documentation describes Kalshi's trading API (known as Trade API v2). By using this API, you agree to Kalshi's Developer Agreement (https://kalshi.com/developer-agreement).
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@kalshi.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EventPosition : MarketPosition is your accumulated position on a specific market considering all orders and trades on that market.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventPosition {
    /// Cost of the aggregate event position in cents.
    #[serde(rename = "event_exposure")]
    pub event_exposure: i64,
    /// Unique identifier for events.
    #[serde(rename = "event_ticker")]
    pub event_ticker: String,
    /// Fees paid on fill orders, in cents.
    #[serde(rename = "fees_paid")]
    pub fees_paid: i64,
    /// Locked in profit and loss, in cents.
    #[serde(rename = "realized_pnl")]
    pub realized_pnl: i64,
    /// Aggregate size of resting orders in contract units.
    #[serde(rename = "resting_order_count")]
    pub resting_order_count: i32,
    /// Total spent on this event in cents.
    #[serde(rename = "total_cost")]
    pub total_cost: i64,
}

impl EventPosition {
    /// MarketPosition is your accumulated position on a specific market considering all orders and trades on that market.
    pub fn new(event_exposure: i64, event_ticker: String, fees_paid: i64, realized_pnl: i64, resting_order_count: i32, total_cost: i64) -> EventPosition {
        EventPosition {
            event_exposure,
            event_ticker,
            fees_paid,
            realized_pnl,
            resting_order_count,
            total_cost,
        }
    }
}

